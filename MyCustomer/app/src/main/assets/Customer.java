package alu.com; // Your actual package

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;
import androidx.annotation.NonNull; // Import this for 'fullname'

@Entity(tableName = "customers")
public class Customer {

    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "id") // Matches 'id' column name in DB
    private int id; // 'int' makes it notNull=true implicitly, matching DB's 'NOT NULL' for id

    @NonNull // This is CRUCIAL: Matches 'fullname TEXT NOT NULL' in your DB
    @ColumnInfo(name = "fullname") // IMPORTANT: Maps to the 'fullname' column in your DB
    private String fullname;

    @ColumnInfo(name = "email") // Matches 'email' column name in DB
    private String email; // Nullable in DB, so no @NonNull needed here

    @ColumnInfo(name = "phone") // Matches 'phone' column name in DB
    private String phone; // Nullable in DB

    @ColumnInfo(name = "address") // Matches 'address' column name in DB
    private String address; // Nullable in DB

    @ColumnInfo(name = "city") // Matches 'city' column name in DB
    private String city; // Nullable in DB

    /**
     * Constructor for creating a NEW Customer object to be INSERTED into the database.
     * The 'id' is NOT included because it's auto-generated by the database.
     *
     * @param fullname The full name of the customer (cannot be null as per DB schema).
     * @param email The email of the customer (can be null).
     * @param phone The phone number of the customer (can be null).
     * @param address The address of the customer (can be null).
     * @param city The city of the customer (can be null).
     */
    @Ignore
    public Customer(@NonNull String fullname, String email, String phone, String address, String city) {
        // Room will automatically generate and set the 'id' after insertion.
        this.fullname = fullname;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.city = city;
    }

    /**
     * Constructor for creating a Customer object when RETRIEVING data from the database.
     * This constructor includes the 'id' as it will already exist in the database.
     * Room uses this or setters to re-construct the object from a database row.
     *
     * @param id The unique ID of the customer.
     * @param fullname The full name of the customer.
     * @param email The email of the customer.
     * @param phone The phone number of the customer.
     * @param address The address of the customer.
     * @param city The city of the customer.
     */
    public Customer(int id, @NonNull String fullname, String email, String phone, String address, String city) {
        this.id = id;
        this.fullname = fullname;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.city = city;
    }

    // --- Getters and Setters ---
    // Room needs getters and setters (or public fields) to access data.

    public int getId() {
        return id;
    }

    // Room will use this setter to populate the ID after an auto-generated insert
    // or when loading an existing customer from the database.
    public void setId(int id) {
        this.id = id;
    }

    @NonNull // The getter should also reflect the non-null constraint
    public String getFullname() {
        return fullname;
    }

    public void setFullname(@NonNull String fullname) {
        this.fullname = fullname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}